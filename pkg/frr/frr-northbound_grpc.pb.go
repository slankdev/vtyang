// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: frr-northbound.proto

package frr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NorthboundClient is the client API for Northbound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NorthboundClient interface {
	// Retrieve the capabilities supported by the target.
	GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesResponse, error)
	// Retrieve configuration data, state data or both from the target.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Northbound_GetClient, error)
	// Create a new candidate configuration and return a reference to it. The
	// created candidate is a copy of the running configuration.
	CreateCandidate(ctx context.Context, in *CreateCandidateRequest, opts ...grpc.CallOption) (*CreateCandidateResponse, error)
	// Delete a candidate configuration.
	DeleteCandidate(ctx context.Context, in *DeleteCandidateRequest, opts ...grpc.CallOption) (*DeleteCandidateResponse, error)
	// Update a candidate configuration by rebasing the changes on top of the
	// latest running configuration. Resolve conflicts automatically by giving
	// preference to the changes done in the candidate configuration.
	UpdateCandidate(ctx context.Context, in *UpdateCandidateRequest, opts ...grpc.CallOption) (*UpdateCandidateResponse, error)
	// Edit a candidate configuration. All changes are discarded if any error
	// happens.
	EditCandidate(ctx context.Context, in *EditCandidateRequest, opts ...grpc.CallOption) (*EditCandidateResponse, error)
	// Load configuration data into a candidate configuration. Both merge and
	// replace semantics are supported.
	LoadToCandidate(ctx context.Context, in *LoadToCandidateRequest, opts ...grpc.CallOption) (*LoadToCandidateResponse, error)
	// Create a new configuration transaction using a two-phase commit protocol.
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// List the metadata of all configuration transactions recorded in the
	// transactions database.
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (Northbound_ListTransactionsClient, error)
	// Fetch a configuration (identified by its transaction ID) from the
	// transactions database.
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// Lock the running configuration, preventing other users from changing it.
	LockConfig(ctx context.Context, in *LockConfigRequest, opts ...grpc.CallOption) (*LockConfigResponse, error)
	// Unlock the running configuration.
	UnlockConfig(ctx context.Context, in *UnlockConfigRequest, opts ...grpc.CallOption) (*UnlockConfigResponse, error)
	// Execute a YANG RPC.
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type northboundClient struct {
	cc grpc.ClientConnInterface
}

func NewNorthboundClient(cc grpc.ClientConnInterface) NorthboundClient {
	return &northboundClient{cc}
}

func (c *northboundClient) GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesResponse, error) {
	out := new(GetCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/GetCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Northbound_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Northbound_ServiceDesc.Streams[0], "/frr.Northbound/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &northboundGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Northbound_GetClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type northboundGetClient struct {
	grpc.ClientStream
}

func (x *northboundGetClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *northboundClient) CreateCandidate(ctx context.Context, in *CreateCandidateRequest, opts ...grpc.CallOption) (*CreateCandidateResponse, error) {
	out := new(CreateCandidateResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/CreateCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) DeleteCandidate(ctx context.Context, in *DeleteCandidateRequest, opts ...grpc.CallOption) (*DeleteCandidateResponse, error) {
	out := new(DeleteCandidateResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/DeleteCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) UpdateCandidate(ctx context.Context, in *UpdateCandidateRequest, opts ...grpc.CallOption) (*UpdateCandidateResponse, error) {
	out := new(UpdateCandidateResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/UpdateCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) EditCandidate(ctx context.Context, in *EditCandidateRequest, opts ...grpc.CallOption) (*EditCandidateResponse, error) {
	out := new(EditCandidateResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/EditCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) LoadToCandidate(ctx context.Context, in *LoadToCandidateRequest, opts ...grpc.CallOption) (*LoadToCandidateResponse, error) {
	out := new(LoadToCandidateResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/LoadToCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (Northbound_ListTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Northbound_ServiceDesc.Streams[1], "/frr.Northbound/ListTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &northboundListTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Northbound_ListTransactionsClient interface {
	Recv() (*ListTransactionsResponse, error)
	grpc.ClientStream
}

type northboundListTransactionsClient struct {
	grpc.ClientStream
}

func (x *northboundListTransactionsClient) Recv() (*ListTransactionsResponse, error) {
	m := new(ListTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *northboundClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) LockConfig(ctx context.Context, in *LockConfigRequest, opts ...grpc.CallOption) (*LockConfigResponse, error) {
	out := new(LockConfigResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/LockConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) UnlockConfig(ctx context.Context, in *UnlockConfigRequest, opts ...grpc.CallOption) (*UnlockConfigResponse, error) {
	out := new(UnlockConfigResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/UnlockConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *northboundClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/frr.Northbound/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NorthboundServer is the server API for Northbound service.
// All implementations must embed UnimplementedNorthboundServer
// for forward compatibility
type NorthboundServer interface {
	// Retrieve the capabilities supported by the target.
	GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesResponse, error)
	// Retrieve configuration data, state data or both from the target.
	Get(*GetRequest, Northbound_GetServer) error
	// Create a new candidate configuration and return a reference to it. The
	// created candidate is a copy of the running configuration.
	CreateCandidate(context.Context, *CreateCandidateRequest) (*CreateCandidateResponse, error)
	// Delete a candidate configuration.
	DeleteCandidate(context.Context, *DeleteCandidateRequest) (*DeleteCandidateResponse, error)
	// Update a candidate configuration by rebasing the changes on top of the
	// latest running configuration. Resolve conflicts automatically by giving
	// preference to the changes done in the candidate configuration.
	UpdateCandidate(context.Context, *UpdateCandidateRequest) (*UpdateCandidateResponse, error)
	// Edit a candidate configuration. All changes are discarded if any error
	// happens.
	EditCandidate(context.Context, *EditCandidateRequest) (*EditCandidateResponse, error)
	// Load configuration data into a candidate configuration. Both merge and
	// replace semantics are supported.
	LoadToCandidate(context.Context, *LoadToCandidateRequest) (*LoadToCandidateResponse, error)
	// Create a new configuration transaction using a two-phase commit protocol.
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// List the metadata of all configuration transactions recorded in the
	// transactions database.
	ListTransactions(*ListTransactionsRequest, Northbound_ListTransactionsServer) error
	// Fetch a configuration (identified by its transaction ID) from the
	// transactions database.
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// Lock the running configuration, preventing other users from changing it.
	LockConfig(context.Context, *LockConfigRequest) (*LockConfigResponse, error)
	// Unlock the running configuration.
	UnlockConfig(context.Context, *UnlockConfigRequest) (*UnlockConfigResponse, error)
	// Execute a YANG RPC.
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedNorthboundServer()
}

// UnimplementedNorthboundServer must be embedded to have forward compatible implementations.
type UnimplementedNorthboundServer struct {
}

func (UnimplementedNorthboundServer) GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedNorthboundServer) Get(*GetRequest, Northbound_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNorthboundServer) CreateCandidate(context.Context, *CreateCandidateRequest) (*CreateCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCandidate not implemented")
}
func (UnimplementedNorthboundServer) DeleteCandidate(context.Context, *DeleteCandidateRequest) (*DeleteCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCandidate not implemented")
}
func (UnimplementedNorthboundServer) UpdateCandidate(context.Context, *UpdateCandidateRequest) (*UpdateCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCandidate not implemented")
}
func (UnimplementedNorthboundServer) EditCandidate(context.Context, *EditCandidateRequest) (*EditCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCandidate not implemented")
}
func (UnimplementedNorthboundServer) LoadToCandidate(context.Context, *LoadToCandidateRequest) (*LoadToCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadToCandidate not implemented")
}
func (UnimplementedNorthboundServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedNorthboundServer) ListTransactions(*ListTransactionsRequest, Northbound_ListTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedNorthboundServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedNorthboundServer) LockConfig(context.Context, *LockConfigRequest) (*LockConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockConfig not implemented")
}
func (UnimplementedNorthboundServer) UnlockConfig(context.Context, *UnlockConfigRequest) (*UnlockConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockConfig not implemented")
}
func (UnimplementedNorthboundServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedNorthboundServer) mustEmbedUnimplementedNorthboundServer() {}

// UnsafeNorthboundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NorthboundServer will
// result in compilation errors.
type UnsafeNorthboundServer interface {
	mustEmbedUnimplementedNorthboundServer()
}

func RegisterNorthboundServer(s grpc.ServiceRegistrar, srv NorthboundServer) {
	s.RegisterService(&Northbound_ServiceDesc, srv)
}

func _Northbound_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/GetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).GetCapabilities(ctx, req.(*GetCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NorthboundServer).Get(m, &northboundGetServer{stream})
}

type Northbound_GetServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type northboundGetServer struct {
	grpc.ServerStream
}

func (x *northboundGetServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Northbound_CreateCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).CreateCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/CreateCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).CreateCandidate(ctx, req.(*CreateCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_DeleteCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).DeleteCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/DeleteCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).DeleteCandidate(ctx, req.(*DeleteCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_UpdateCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).UpdateCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/UpdateCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).UpdateCandidate(ctx, req.(*UpdateCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_EditCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).EditCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/EditCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).EditCandidate(ctx, req.(*EditCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_LoadToCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadToCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).LoadToCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/LoadToCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).LoadToCandidate(ctx, req.(*LoadToCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_ListTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NorthboundServer).ListTransactions(m, &northboundListTransactionsServer{stream})
}

type Northbound_ListTransactionsServer interface {
	Send(*ListTransactionsResponse) error
	grpc.ServerStream
}

type northboundListTransactionsServer struct {
	grpc.ServerStream
}

func (x *northboundListTransactionsServer) Send(m *ListTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Northbound_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_LockConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).LockConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/LockConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).LockConfig(ctx, req.(*LockConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_UnlockConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).UnlockConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/UnlockConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).UnlockConfig(ctx, req.(*UnlockConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Northbound_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorthboundServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frr.Northbound/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorthboundServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Northbound_ServiceDesc is the grpc.ServiceDesc for Northbound service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Northbound_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frr.Northbound",
	HandlerType: (*NorthboundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapabilities",
			Handler:    _Northbound_GetCapabilities_Handler,
		},
		{
			MethodName: "CreateCandidate",
			Handler:    _Northbound_CreateCandidate_Handler,
		},
		{
			MethodName: "DeleteCandidate",
			Handler:    _Northbound_DeleteCandidate_Handler,
		},
		{
			MethodName: "UpdateCandidate",
			Handler:    _Northbound_UpdateCandidate_Handler,
		},
		{
			MethodName: "EditCandidate",
			Handler:    _Northbound_EditCandidate_Handler,
		},
		{
			MethodName: "LoadToCandidate",
			Handler:    _Northbound_LoadToCandidate_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Northbound_Commit_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _Northbound_GetTransaction_Handler,
		},
		{
			MethodName: "LockConfig",
			Handler:    _Northbound_LockConfig_Handler,
		},
		{
			MethodName: "UnlockConfig",
			Handler:    _Northbound_UnlockConfig_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Northbound_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Northbound_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTransactions",
			Handler:       _Northbound_ListTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "frr-northbound.proto",
}
