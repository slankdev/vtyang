// SPDX-License-Identifier: ISC
//
// mgmt.proto
//
// @copyright Copyright (C) 2021  Vmware, Inc.
//
// @author Pushpasis Sarkar <spushpasis@vmware.com>
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: mgmt.proto

//
// Protobuf definitions pertaining to the MGMTD component.
//

package mgmtd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CfgDataReqType int32

const (
	CfgDataReqType_REQ_TYPE_NONE CfgDataReqType = 0
	CfgDataReqType_SET_DATA      CfgDataReqType = 1
	CfgDataReqType_REMOVE_DATA   CfgDataReqType = 2
	CfgDataReqType_CREATE_DATA   CfgDataReqType = 3
	CfgDataReqType_DELETE_DATA   CfgDataReqType = 4
	CfgDataReqType_REPLACE_DATA  CfgDataReqType = 5
)

// Enum value maps for CfgDataReqType.
var (
	CfgDataReqType_name = map[int32]string{
		0: "REQ_TYPE_NONE",
		1: "SET_DATA",
		2: "REMOVE_DATA",
		3: "CREATE_DATA",
		4: "DELETE_DATA",
		5: "REPLACE_DATA",
	}
	CfgDataReqType_value = map[string]int32{
		"REQ_TYPE_NONE": 0,
		"SET_DATA":      1,
		"REMOVE_DATA":   2,
		"CREATE_DATA":   3,
		"DELETE_DATA":   4,
		"REPLACE_DATA":  5,
	}
)

func (x CfgDataReqType) Enum() *CfgDataReqType {
	p := new(CfgDataReqType)
	*p = x
	return p
}

func (x CfgDataReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CfgDataReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[0].Descriptor()
}

func (CfgDataReqType) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[0]
}

func (x CfgDataReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CfgDataReqType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CfgDataReqType(num)
	return nil
}

// Deprecated: Use CfgDataReqType.Descriptor instead.
func (CfgDataReqType) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{0}
}

type DatastoreId int32

const (
	DatastoreId_DS_NONE        DatastoreId = 0
	DatastoreId_RUNNING_DS     DatastoreId = 1
	DatastoreId_CANDIDATE_DS   DatastoreId = 2
	DatastoreId_OPERATIONAL_DS DatastoreId = 3
	DatastoreId_STARTUP_DS     DatastoreId = 4
)

// Enum value maps for DatastoreId.
var (
	DatastoreId_name = map[int32]string{
		0: "DS_NONE",
		1: "RUNNING_DS",
		2: "CANDIDATE_DS",
		3: "OPERATIONAL_DS",
		4: "STARTUP_DS",
	}
	DatastoreId_value = map[string]int32{
		"DS_NONE":        0,
		"RUNNING_DS":     1,
		"CANDIDATE_DS":   2,
		"OPERATIONAL_DS": 3,
		"STARTUP_DS":     4,
	}
)

func (x DatastoreId) Enum() *DatastoreId {
	p := new(DatastoreId)
	*p = x
	return p
}

func (x DatastoreId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatastoreId) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[1].Descriptor()
}

func (DatastoreId) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[1]
}

func (x DatastoreId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DatastoreId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DatastoreId(num)
	return nil
}

// Deprecated: Use DatastoreId.Descriptor instead.
func (DatastoreId) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{1}
}

type YangDataXPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpath *string `protobuf:"bytes,1,req,name=xpath" json:"xpath,omitempty"`
}

func (x *YangDataXPath) Reset() {
	*x = YangDataXPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YangDataXPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YangDataXPath) ProtoMessage() {}

func (x *YangDataXPath) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YangDataXPath.ProtoReflect.Descriptor instead.
func (*YangDataXPath) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{0}
}

func (x *YangDataXPath) GetXpath() string {
	if x != nil && x.Xpath != nil {
		return *x.Xpath
	}
	return ""
}

type YangDataValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*YangDataValue_EncodedStrVal
	Value isYangDataValue_Value `protobuf_oneof:"value"`
}

func (x *YangDataValue) Reset() {
	*x = YangDataValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YangDataValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YangDataValue) ProtoMessage() {}

func (x *YangDataValue) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YangDataValue.ProtoReflect.Descriptor instead.
func (*YangDataValue) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{1}
}

func (m *YangDataValue) GetValue() isYangDataValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *YangDataValue) GetEncodedStrVal() string {
	if x, ok := x.GetValue().(*YangDataValue_EncodedStrVal); ok {
		return x.EncodedStrVal
	}
	return ""
}

type isYangDataValue_Value interface {
	isYangDataValue_Value()
}

type YangDataValue_EncodedStrVal struct {
	// NOTE: For now let's use stringized value ONLY.
	// We will enhance it later to pass native-format
	// if needed.
	//
	// bool bool_val = 2;
	// double double_val = 3;
	// float float_val = 4;
	// string string_val = 5;
	// bytes bytes_val = 6;
	// int32 int32_val = 7;
	// int64 int64_val = 8;
	// uint32 uint32_val = 9;
	// uint64 uint64_val = 10;
	// int32 int8_val = 11;
	// uint32 uint8_val = 12;
	// int32 int16_val = 13;
	// uint32 uint16_val = 14;
	EncodedStrVal string `protobuf:"bytes,100,opt,name=encoded_str_val,json=encodedStrVal,oneof"`
}

func (*YangDataValue_EncodedStrVal) isYangDataValue_Value() {}

type YangData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpath *string        `protobuf:"bytes,1,req,name=xpath" json:"xpath,omitempty"`
	Value *YangDataValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *YangData) Reset() {
	*x = YangData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YangData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YangData) ProtoMessage() {}

func (x *YangData) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YangData.ProtoReflect.Descriptor instead.
func (*YangData) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{2}
}

func (x *YangData) GetXpath() string {
	if x != nil && x.Xpath != nil {
		return *x.Xpath
	}
	return ""
}

func (x *YangData) GetValue() *YangDataValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type YangCfgDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *YangData       `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	ReqType *CfgDataReqType `protobuf:"varint,2,req,name=req_type,json=reqType,enum=mgmtd.CfgDataReqType" json:"req_type,omitempty"`
}

func (x *YangCfgDataReq) Reset() {
	*x = YangCfgDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YangCfgDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YangCfgDataReq) ProtoMessage() {}

func (x *YangCfgDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YangCfgDataReq.ProtoReflect.Descriptor instead.
func (*YangCfgDataReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{3}
}

func (x *YangCfgDataReq) GetData() *YangData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *YangCfgDataReq) GetReqType() CfgDataReqType {
	if x != nil && x.ReqType != nil {
		return *x.ReqType
	}
	return CfgDataReqType_REQ_TYPE_NONE
}

type YangGetDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *YangData `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	NextIndx *int64    `protobuf:"varint,2,req,name=next_indx,json=nextIndx" json:"next_indx,omitempty"`
}

func (x *YangGetDataReq) Reset() {
	*x = YangGetDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YangGetDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YangGetDataReq) ProtoMessage() {}

func (x *YangGetDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YangGetDataReq.ProtoReflect.Descriptor instead.
func (*YangGetDataReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{4}
}

func (x *YangGetDataReq) GetData() *YangData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *YangGetDataReq) GetNextIndx() int64 {
	if x != nil && x.NextIndx != nil {
		return *x.NextIndx
	}
	return 0
}

// Backend Interface Messages
type BeSubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName   *string  `protobuf:"bytes,1,req,name=client_name,json=clientName" json:"client_name,omitempty"`
	ConfigXpaths []string `protobuf:"bytes,2,rep,name=config_xpaths,json=configXpaths" json:"config_xpaths,omitempty"`
	OperXpaths   []string `protobuf:"bytes,3,rep,name=oper_xpaths,json=operXpaths" json:"oper_xpaths,omitempty"`
	NotifXpaths  []string `protobuf:"bytes,4,rep,name=notif_xpaths,json=notifXpaths" json:"notif_xpaths,omitempty"`
}

func (x *BeSubscribeReq) Reset() {
	*x = BeSubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeSubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeSubscribeReq) ProtoMessage() {}

func (x *BeSubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeSubscribeReq.ProtoReflect.Descriptor instead.
func (*BeSubscribeReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{5}
}

func (x *BeSubscribeReq) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

func (x *BeSubscribeReq) GetConfigXpaths() []string {
	if x != nil {
		return x.ConfigXpaths
	}
	return nil
}

func (x *BeSubscribeReq) GetOperXpaths() []string {
	if x != nil {
		return x.OperXpaths
	}
	return nil
}

func (x *BeSubscribeReq) GetNotifXpaths() []string {
	if x != nil {
		return x.NotifXpaths
	}
	return nil
}

type BeSubscribeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
}

func (x *BeSubscribeReply) Reset() {
	*x = BeSubscribeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeSubscribeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeSubscribeReply) ProtoMessage() {}

func (x *BeSubscribeReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeSubscribeReply.ProtoReflect.Descriptor instead.
func (*BeSubscribeReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{6}
}

func (x *BeSubscribeReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type BeTxnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnId  *uint64 `protobuf:"varint,1,req,name=txn_id,json=txnId" json:"txn_id,omitempty"`
	Create *bool   `protobuf:"varint,2,req,name=create" json:"create,omitempty"`
}

func (x *BeTxnReq) Reset() {
	*x = BeTxnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeTxnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeTxnReq) ProtoMessage() {}

func (x *BeTxnReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeTxnReq.ProtoReflect.Descriptor instead.
func (*BeTxnReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{7}
}

func (x *BeTxnReq) GetTxnId() uint64 {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return 0
}

func (x *BeTxnReq) GetCreate() bool {
	if x != nil && x.Create != nil {
		return *x.Create
	}
	return false
}

type BeTxnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnId   *uint64 `protobuf:"varint,1,req,name=txn_id,json=txnId" json:"txn_id,omitempty"`
	Create  *bool   `protobuf:"varint,2,req,name=create" json:"create,omitempty"`
	Success *bool   `protobuf:"varint,3,req,name=success" json:"success,omitempty"`
}

func (x *BeTxnReply) Reset() {
	*x = BeTxnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeTxnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeTxnReply) ProtoMessage() {}

func (x *BeTxnReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeTxnReply.ProtoReflect.Descriptor instead.
func (*BeTxnReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{8}
}

func (x *BeTxnReply) GetTxnId() uint64 {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return 0
}

func (x *BeTxnReply) GetCreate() bool {
	if x != nil && x.Create != nil {
		return *x.Create
	}
	return false
}

func (x *BeTxnReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type BeCfgDataCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnId     *uint64           `protobuf:"varint,1,req,name=txn_id,json=txnId" json:"txn_id,omitempty"`
	DataReq   []*YangCfgDataReq `protobuf:"bytes,2,rep,name=data_req,json=dataReq" json:"data_req,omitempty"`
	EndOfData *bool             `protobuf:"varint,3,req,name=end_of_data,json=endOfData" json:"end_of_data,omitempty"`
}

func (x *BeCfgDataCreateReq) Reset() {
	*x = BeCfgDataCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeCfgDataCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeCfgDataCreateReq) ProtoMessage() {}

func (x *BeCfgDataCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeCfgDataCreateReq.ProtoReflect.Descriptor instead.
func (*BeCfgDataCreateReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{9}
}

func (x *BeCfgDataCreateReq) GetTxnId() uint64 {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return 0
}

func (x *BeCfgDataCreateReq) GetDataReq() []*YangCfgDataReq {
	if x != nil {
		return x.DataReq
	}
	return nil
}

func (x *BeCfgDataCreateReq) GetEndOfData() bool {
	if x != nil && x.EndOfData != nil {
		return *x.EndOfData
	}
	return false
}

type BeCfgDataCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnId      *uint64 `protobuf:"varint,1,req,name=txn_id,json=txnId" json:"txn_id,omitempty"`
	Success    *bool   `protobuf:"varint,2,req,name=success" json:"success,omitempty"`
	ErrorIfAny *string `protobuf:"bytes,3,opt,name=error_if_any,json=errorIfAny" json:"error_if_any,omitempty"`
}

func (x *BeCfgDataCreateReply) Reset() {
	*x = BeCfgDataCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeCfgDataCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeCfgDataCreateReply) ProtoMessage() {}

func (x *BeCfgDataCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeCfgDataCreateReply.ProtoReflect.Descriptor instead.
func (*BeCfgDataCreateReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{10}
}

func (x *BeCfgDataCreateReply) GetTxnId() uint64 {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return 0
}

func (x *BeCfgDataCreateReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *BeCfgDataCreateReply) GetErrorIfAny() string {
	if x != nil && x.ErrorIfAny != nil {
		return *x.ErrorIfAny
	}
	return ""
}

type BeCfgDataApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnId *uint64 `protobuf:"varint,1,req,name=txn_id,json=txnId" json:"txn_id,omitempty"`
}

func (x *BeCfgDataApplyReq) Reset() {
	*x = BeCfgDataApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeCfgDataApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeCfgDataApplyReq) ProtoMessage() {}

func (x *BeCfgDataApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeCfgDataApplyReq.ProtoReflect.Descriptor instead.
func (*BeCfgDataApplyReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{11}
}

func (x *BeCfgDataApplyReq) GetTxnId() uint64 {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return 0
}

type BeCfgDataApplyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnId      *uint64 `protobuf:"varint,1,req,name=txn_id,json=txnId" json:"txn_id,omitempty"`
	Success    *bool   `protobuf:"varint,2,req,name=success" json:"success,omitempty"`
	ErrorIfAny *string `protobuf:"bytes,3,opt,name=error_if_any,json=errorIfAny" json:"error_if_any,omitempty"`
}

func (x *BeCfgDataApplyReply) Reset() {
	*x = BeCfgDataApplyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeCfgDataApplyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeCfgDataApplyReply) ProtoMessage() {}

func (x *BeCfgDataApplyReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeCfgDataApplyReply.ProtoReflect.Descriptor instead.
func (*BeCfgDataApplyReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{12}
}

func (x *BeCfgDataApplyReply) GetTxnId() uint64 {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return 0
}

func (x *BeCfgDataApplyReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *BeCfgDataApplyReply) GetErrorIfAny() string {
	if x != nil && x.ErrorIfAny != nil {
		return *x.ErrorIfAny
	}
	return ""
}

type YangDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []*YangData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	NextIndx *int64      `protobuf:"varint,2,req,name=next_indx,json=nextIndx" json:"next_indx,omitempty"`
}

func (x *YangDataReply) Reset() {
	*x = YangDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YangDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YangDataReply) ProtoMessage() {}

func (x *YangDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YangDataReply.ProtoReflect.Descriptor instead.
func (*YangDataReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{13}
}

func (x *YangDataReply) GetData() []*YangData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *YangDataReply) GetNextIndx() int64 {
	if x != nil && x.NextIndx != nil {
		return *x.NextIndx
	}
	return 0
}

// Any message on the MGMTD Backend Interface.
type BeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*BeMessage_SubscrReq
	//	*BeMessage_SubscrReply
	//	*BeMessage_TxnReq
	//	*BeMessage_TxnReply
	//	*BeMessage_CfgDataReq
	//	*BeMessage_CfgDataReply
	//	*BeMessage_CfgApplyReq
	//	*BeMessage_CfgApplyReply
	Message isBeMessage_Message `protobuf_oneof:"message"`
}

func (x *BeMessage) Reset() {
	*x = BeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeMessage) ProtoMessage() {}

func (x *BeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeMessage.ProtoReflect.Descriptor instead.
func (*BeMessage) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{14}
}

func (m *BeMessage) GetMessage() isBeMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *BeMessage) GetSubscrReq() *BeSubscribeReq {
	if x, ok := x.GetMessage().(*BeMessage_SubscrReq); ok {
		return x.SubscrReq
	}
	return nil
}

func (x *BeMessage) GetSubscrReply() *BeSubscribeReply {
	if x, ok := x.GetMessage().(*BeMessage_SubscrReply); ok {
		return x.SubscrReply
	}
	return nil
}

func (x *BeMessage) GetTxnReq() *BeTxnReq {
	if x, ok := x.GetMessage().(*BeMessage_TxnReq); ok {
		return x.TxnReq
	}
	return nil
}

func (x *BeMessage) GetTxnReply() *BeTxnReply {
	if x, ok := x.GetMessage().(*BeMessage_TxnReply); ok {
		return x.TxnReply
	}
	return nil
}

func (x *BeMessage) GetCfgDataReq() *BeCfgDataCreateReq {
	if x, ok := x.GetMessage().(*BeMessage_CfgDataReq); ok {
		return x.CfgDataReq
	}
	return nil
}

func (x *BeMessage) GetCfgDataReply() *BeCfgDataCreateReply {
	if x, ok := x.GetMessage().(*BeMessage_CfgDataReply); ok {
		return x.CfgDataReply
	}
	return nil
}

func (x *BeMessage) GetCfgApplyReq() *BeCfgDataApplyReq {
	if x, ok := x.GetMessage().(*BeMessage_CfgApplyReq); ok {
		return x.CfgApplyReq
	}
	return nil
}

func (x *BeMessage) GetCfgApplyReply() *BeCfgDataApplyReply {
	if x, ok := x.GetMessage().(*BeMessage_CfgApplyReply); ok {
		return x.CfgApplyReply
	}
	return nil
}

type isBeMessage_Message interface {
	isBeMessage_Message()
}

type BeMessage_SubscrReq struct {
	SubscrReq *BeSubscribeReq `protobuf:"bytes,2,opt,name=subscr_req,json=subscrReq,oneof"`
}

type BeMessage_SubscrReply struct {
	SubscrReply *BeSubscribeReply `protobuf:"bytes,3,opt,name=subscr_reply,json=subscrReply,oneof"`
}

type BeMessage_TxnReq struct {
	TxnReq *BeTxnReq `protobuf:"bytes,4,opt,name=txn_req,json=txnReq,oneof"`
}

type BeMessage_TxnReply struct {
	TxnReply *BeTxnReply `protobuf:"bytes,5,opt,name=txn_reply,json=txnReply,oneof"`
}

type BeMessage_CfgDataReq struct {
	CfgDataReq *BeCfgDataCreateReq `protobuf:"bytes,6,opt,name=cfg_data_req,json=cfgDataReq,oneof"`
}

type BeMessage_CfgDataReply struct {
	CfgDataReply *BeCfgDataCreateReply `protobuf:"bytes,7,opt,name=cfg_data_reply,json=cfgDataReply,oneof"`
}

type BeMessage_CfgApplyReq struct {
	CfgApplyReq *BeCfgDataApplyReq `protobuf:"bytes,8,opt,name=cfg_apply_req,json=cfgApplyReq,oneof"`
}

type BeMessage_CfgApplyReply struct {
	CfgApplyReply *BeCfgDataApplyReply `protobuf:"bytes,9,opt,name=cfg_apply_reply,json=cfgApplyReply,oneof"`
}

func (*BeMessage_SubscrReq) isBeMessage_Message() {}

func (*BeMessage_SubscrReply) isBeMessage_Message() {}

func (*BeMessage_TxnReq) isBeMessage_Message() {}

func (*BeMessage_TxnReply) isBeMessage_Message() {}

func (*BeMessage_CfgDataReq) isBeMessage_Message() {}

func (*BeMessage_CfgDataReply) isBeMessage_Message() {}

func (*BeMessage_CfgApplyReq) isBeMessage_Message() {}

func (*BeMessage_CfgApplyReply) isBeMessage_Message() {}

type FeRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName *string `protobuf:"bytes,1,req,name=client_name,json=clientName" json:"client_name,omitempty"`
}

func (x *FeRegisterReq) Reset() {
	*x = FeRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeRegisterReq) ProtoMessage() {}

func (x *FeRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeRegisterReq.ProtoReflect.Descriptor instead.
func (*FeRegisterReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{15}
}

func (x *FeRegisterReq) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

type FeSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Create *bool `protobuf:"varint,1,req,name=create" json:"create,omitempty"`
	// Types that are assignable to Id:
	//
	//	*FeSessionReq_ClientConnId
	//	*FeSessionReq_SessionId
	Id isFeSessionReq_Id `protobuf_oneof:"id"`
}

func (x *FeSessionReq) Reset() {
	*x = FeSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeSessionReq) ProtoMessage() {}

func (x *FeSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeSessionReq.ProtoReflect.Descriptor instead.
func (*FeSessionReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{16}
}

func (x *FeSessionReq) GetCreate() bool {
	if x != nil && x.Create != nil {
		return *x.Create
	}
	return false
}

func (m *FeSessionReq) GetId() isFeSessionReq_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *FeSessionReq) GetClientConnId() uint64 {
	if x, ok := x.GetId().(*FeSessionReq_ClientConnId); ok {
		return x.ClientConnId
	}
	return 0
}

func (x *FeSessionReq) GetSessionId() uint64 {
	if x, ok := x.GetId().(*FeSessionReq_SessionId); ok {
		return x.SessionId
	}
	return 0
}

type isFeSessionReq_Id interface {
	isFeSessionReq_Id()
}

type FeSessionReq_ClientConnId struct {
	ClientConnId uint64 `protobuf:"varint,2,opt,name=client_conn_id,json=clientConnId,oneof"` // Applicable for create request only
}

type FeSessionReq_SessionId struct {
	SessionId uint64 `protobuf:"varint,3,opt,name=session_id,json=sessionId,oneof"` // Applicable for delete request only
}

func (*FeSessionReq_ClientConnId) isFeSessionReq_Id() {}

func (*FeSessionReq_SessionId) isFeSessionReq_Id() {}

type FeSessionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Create       *bool   `protobuf:"varint,1,req,name=create" json:"create,omitempty"`
	Success      *bool   `protobuf:"varint,2,req,name=success" json:"success,omitempty"`
	ClientConnId *uint64 `protobuf:"varint,3,opt,name=client_conn_id,json=clientConnId" json:"client_conn_id,omitempty"` // Applicable for create request only
	SessionId    *uint64 `protobuf:"varint,4,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *FeSessionReply) Reset() {
	*x = FeSessionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeSessionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeSessionReply) ProtoMessage() {}

func (x *FeSessionReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeSessionReply.ProtoReflect.Descriptor instead.
func (*FeSessionReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{17}
}

func (x *FeSessionReply) GetCreate() bool {
	if x != nil && x.Create != nil {
		return *x.Create
	}
	return false
}

func (x *FeSessionReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *FeSessionReply) GetClientConnId() uint64 {
	if x != nil && x.ClientConnId != nil {
		return *x.ClientConnId
	}
	return 0
}

func (x *FeSessionReply) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type FeLockDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64      `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ReqId     *uint64      `protobuf:"varint,2,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	DsId      *DatastoreId `protobuf:"varint,3,req,name=ds_id,json=dsId,enum=mgmtd.DatastoreId" json:"ds_id,omitempty"`
	Lock      *bool        `protobuf:"varint,4,req,name=lock" json:"lock,omitempty"`
}

func (x *FeLockDsReq) Reset() {
	*x = FeLockDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeLockDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeLockDsReq) ProtoMessage() {}

func (x *FeLockDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeLockDsReq.ProtoReflect.Descriptor instead.
func (*FeLockDsReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{18}
}

func (x *FeLockDsReq) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeLockDsReq) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeLockDsReq) GetDsId() DatastoreId {
	if x != nil && x.DsId != nil {
		return *x.DsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeLockDsReq) GetLock() bool {
	if x != nil && x.Lock != nil {
		return *x.Lock
	}
	return false
}

type FeLockDsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *uint64      `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ReqId      *uint64      `protobuf:"varint,2,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	DsId       *DatastoreId `protobuf:"varint,3,req,name=ds_id,json=dsId,enum=mgmtd.DatastoreId" json:"ds_id,omitempty"`
	Lock       *bool        `protobuf:"varint,4,req,name=lock" json:"lock,omitempty"`
	Success    *bool        `protobuf:"varint,5,req,name=success" json:"success,omitempty"`
	ErrorIfAny *string      `protobuf:"bytes,6,opt,name=error_if_any,json=errorIfAny" json:"error_if_any,omitempty"`
}

func (x *FeLockDsReply) Reset() {
	*x = FeLockDsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeLockDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeLockDsReply) ProtoMessage() {}

func (x *FeLockDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeLockDsReply.ProtoReflect.Descriptor instead.
func (*FeLockDsReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{19}
}

func (x *FeLockDsReply) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeLockDsReply) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeLockDsReply) GetDsId() DatastoreId {
	if x != nil && x.DsId != nil {
		return *x.DsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeLockDsReply) GetLock() bool {
	if x != nil && x.Lock != nil {
		return *x.Lock
	}
	return false
}

func (x *FeLockDsReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *FeLockDsReply) GetErrorIfAny() string {
	if x != nil && x.ErrorIfAny != nil {
		return *x.ErrorIfAny
	}
	return ""
}

type FeSetConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      *uint64           `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DsId           *DatastoreId      `protobuf:"varint,2,req,name=ds_id,json=dsId,enum=mgmtd.DatastoreId" json:"ds_id,omitempty"`
	ReqId          *uint64           `protobuf:"varint,3,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	Data           []*YangCfgDataReq `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	ImplicitCommit *bool             `protobuf:"varint,5,req,name=implicit_commit,json=implicitCommit" json:"implicit_commit,omitempty"`
	CommitDsId     *DatastoreId      `protobuf:"varint,6,req,name=commit_ds_id,json=commitDsId,enum=mgmtd.DatastoreId" json:"commit_ds_id,omitempty"`
}

func (x *FeSetConfigReq) Reset() {
	*x = FeSetConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeSetConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeSetConfigReq) ProtoMessage() {}

func (x *FeSetConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeSetConfigReq.ProtoReflect.Descriptor instead.
func (*FeSetConfigReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{20}
}

func (x *FeSetConfigReq) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeSetConfigReq) GetDsId() DatastoreId {
	if x != nil && x.DsId != nil {
		return *x.DsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeSetConfigReq) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeSetConfigReq) GetData() []*YangCfgDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FeSetConfigReq) GetImplicitCommit() bool {
	if x != nil && x.ImplicitCommit != nil {
		return *x.ImplicitCommit
	}
	return false
}

func (x *FeSetConfigReq) GetCommitDsId() DatastoreId {
	if x != nil && x.CommitDsId != nil {
		return *x.CommitDsId
	}
	return DatastoreId_DS_NONE
}

type FeSetConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      *uint64      `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DsId           *DatastoreId `protobuf:"varint,2,req,name=ds_id,json=dsId,enum=mgmtd.DatastoreId" json:"ds_id,omitempty"`
	ReqId          *uint64      `protobuf:"varint,3,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	Success        *bool        `protobuf:"varint,4,req,name=success" json:"success,omitempty"`
	ImplicitCommit *bool        `protobuf:"varint,5,req,name=implicit_commit,json=implicitCommit" json:"implicit_commit,omitempty"`
	ErrorIfAny     *string      `protobuf:"bytes,6,opt,name=error_if_any,json=errorIfAny" json:"error_if_any,omitempty"`
}

func (x *FeSetConfigReply) Reset() {
	*x = FeSetConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeSetConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeSetConfigReply) ProtoMessage() {}

func (x *FeSetConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeSetConfigReply.ProtoReflect.Descriptor instead.
func (*FeSetConfigReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{21}
}

func (x *FeSetConfigReply) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeSetConfigReply) GetDsId() DatastoreId {
	if x != nil && x.DsId != nil {
		return *x.DsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeSetConfigReply) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeSetConfigReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *FeSetConfigReply) GetImplicitCommit() bool {
	if x != nil && x.ImplicitCommit != nil {
		return *x.ImplicitCommit
	}
	return false
}

func (x *FeSetConfigReply) GetErrorIfAny() string {
	if x != nil && x.ErrorIfAny != nil {
		return *x.ErrorIfAny
	}
	return ""
}

type FeCommitConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *uint64      `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SrcDsId      *DatastoreId `protobuf:"varint,2,req,name=src_ds_id,json=srcDsId,enum=mgmtd.DatastoreId" json:"src_ds_id,omitempty"`
	DstDsId      *DatastoreId `protobuf:"varint,3,req,name=dst_ds_id,json=dstDsId,enum=mgmtd.DatastoreId" json:"dst_ds_id,omitempty"`
	ReqId        *uint64      `protobuf:"varint,4,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	ValidateOnly *bool        `protobuf:"varint,5,req,name=validate_only,json=validateOnly" json:"validate_only,omitempty"`
	Abort        *bool        `protobuf:"varint,6,req,name=abort" json:"abort,omitempty"`
}

func (x *FeCommitConfigReq) Reset() {
	*x = FeCommitConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeCommitConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeCommitConfigReq) ProtoMessage() {}

func (x *FeCommitConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeCommitConfigReq.ProtoReflect.Descriptor instead.
func (*FeCommitConfigReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{22}
}

func (x *FeCommitConfigReq) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeCommitConfigReq) GetSrcDsId() DatastoreId {
	if x != nil && x.SrcDsId != nil {
		return *x.SrcDsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeCommitConfigReq) GetDstDsId() DatastoreId {
	if x != nil && x.DstDsId != nil {
		return *x.DstDsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeCommitConfigReq) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeCommitConfigReq) GetValidateOnly() bool {
	if x != nil && x.ValidateOnly != nil {
		return *x.ValidateOnly
	}
	return false
}

func (x *FeCommitConfigReq) GetAbort() bool {
	if x != nil && x.Abort != nil {
		return *x.Abort
	}
	return false
}

type FeCommitConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    *uint64      `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SrcDsId      *DatastoreId `protobuf:"varint,2,req,name=src_ds_id,json=srcDsId,enum=mgmtd.DatastoreId" json:"src_ds_id,omitempty"`
	DstDsId      *DatastoreId `protobuf:"varint,3,req,name=dst_ds_id,json=dstDsId,enum=mgmtd.DatastoreId" json:"dst_ds_id,omitempty"`
	ReqId        *uint64      `protobuf:"varint,4,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	ValidateOnly *bool        `protobuf:"varint,5,req,name=validate_only,json=validateOnly" json:"validate_only,omitempty"`
	Success      *bool        `protobuf:"varint,6,req,name=success" json:"success,omitempty"`
	Abort        *bool        `protobuf:"varint,7,req,name=abort" json:"abort,omitempty"`
	ErrorIfAny   *string      `protobuf:"bytes,8,opt,name=error_if_any,json=errorIfAny" json:"error_if_any,omitempty"`
}

func (x *FeCommitConfigReply) Reset() {
	*x = FeCommitConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeCommitConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeCommitConfigReply) ProtoMessage() {}

func (x *FeCommitConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeCommitConfigReply.ProtoReflect.Descriptor instead.
func (*FeCommitConfigReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{23}
}

func (x *FeCommitConfigReply) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeCommitConfigReply) GetSrcDsId() DatastoreId {
	if x != nil && x.SrcDsId != nil {
		return *x.SrcDsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeCommitConfigReply) GetDstDsId() DatastoreId {
	if x != nil && x.DstDsId != nil {
		return *x.DstDsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeCommitConfigReply) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeCommitConfigReply) GetValidateOnly() bool {
	if x != nil && x.ValidateOnly != nil {
		return *x.ValidateOnly
	}
	return false
}

func (x *FeCommitConfigReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *FeCommitConfigReply) GetAbort() bool {
	if x != nil && x.Abort != nil {
		return *x.Abort
	}
	return false
}

func (x *FeCommitConfigReply) GetErrorIfAny() string {
	if x != nil && x.ErrorIfAny != nil {
		return *x.ErrorIfAny
	}
	return ""
}

type FeGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64           `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Config    *bool             `protobuf:"varint,2,req,name=config" json:"config,omitempty"`
	DsId      *DatastoreId      `protobuf:"varint,3,req,name=ds_id,json=dsId,enum=mgmtd.DatastoreId" json:"ds_id,omitempty"`
	ReqId     *uint64           `protobuf:"varint,4,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	Data      []*YangGetDataReq `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
}

func (x *FeGetReq) Reset() {
	*x = FeGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeGetReq) ProtoMessage() {}

func (x *FeGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeGetReq.ProtoReflect.Descriptor instead.
func (*FeGetReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{24}
}

func (x *FeGetReq) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeGetReq) GetConfig() bool {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return false
}

func (x *FeGetReq) GetDsId() DatastoreId {
	if x != nil && x.DsId != nil {
		return *x.DsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeGetReq) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeGetReq) GetData() []*YangGetDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type FeGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  *uint64        `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Config     *bool          `protobuf:"varint,2,req,name=config" json:"config,omitempty"`
	DsId       *DatastoreId   `protobuf:"varint,3,req,name=ds_id,json=dsId,enum=mgmtd.DatastoreId" json:"ds_id,omitempty"`
	ReqId      *uint64        `protobuf:"varint,4,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	Success    *bool          `protobuf:"varint,5,req,name=success" json:"success,omitempty"`
	ErrorIfAny *string        `protobuf:"bytes,6,opt,name=error_if_any,json=errorIfAny" json:"error_if_any,omitempty"`
	Data       *YangDataReply `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
}

func (x *FeGetReply) Reset() {
	*x = FeGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeGetReply) ProtoMessage() {}

func (x *FeGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeGetReply.ProtoReflect.Descriptor instead.
func (*FeGetReply) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{25}
}

func (x *FeGetReply) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeGetReply) GetConfig() bool {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return false
}

func (x *FeGetReply) GetDsId() DatastoreId {
	if x != nil && x.DsId != nil {
		return *x.DsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeGetReply) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeGetReply) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *FeGetReply) GetErrorIfAny() string {
	if x != nil && x.ErrorIfAny != nil {
		return *x.ErrorIfAny
	}
	return ""
}

func (x *FeGetReply) GetData() *YangDataReply {
	if x != nil {
		return x.Data
	}
	return nil
}

type FeNotifyDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*YangData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *FeNotifyDataReq) Reset() {
	*x = FeNotifyDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeNotifyDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeNotifyDataReq) ProtoMessage() {}

func (x *FeNotifyDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeNotifyDataReq.ProtoReflect.Descriptor instead.
func (*FeNotifyDataReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{26}
}

func (x *FeNotifyDataReq) GetData() []*YangData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FeRegisterNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *uint64          `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DsId        *DatastoreId     `protobuf:"varint,2,req,name=ds_id,json=dsId,enum=mgmtd.DatastoreId" json:"ds_id,omitempty"`
	RegisterReq *bool            `protobuf:"varint,3,req,name=register_req,json=registerReq" json:"register_req,omitempty"`
	ReqId       *uint64          `protobuf:"varint,4,req,name=req_id,json=reqId" json:"req_id,omitempty"`
	DataXpath   []*YangDataXPath `protobuf:"bytes,5,rep,name=data_xpath,json=dataXpath" json:"data_xpath,omitempty"`
}

func (x *FeRegisterNotifyReq) Reset() {
	*x = FeRegisterNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeRegisterNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeRegisterNotifyReq) ProtoMessage() {}

func (x *FeRegisterNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeRegisterNotifyReq.ProtoReflect.Descriptor instead.
func (*FeRegisterNotifyReq) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{27}
}

func (x *FeRegisterNotifyReq) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *FeRegisterNotifyReq) GetDsId() DatastoreId {
	if x != nil && x.DsId != nil {
		return *x.DsId
	}
	return DatastoreId_DS_NONE
}

func (x *FeRegisterNotifyReq) GetRegisterReq() bool {
	if x != nil && x.RegisterReq != nil {
		return *x.RegisterReq
	}
	return false
}

func (x *FeRegisterNotifyReq) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *FeRegisterNotifyReq) GetDataXpath() []*YangDataXPath {
	if x != nil {
		return x.DataXpath
	}
	return nil
}

type FeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*FeMessage_RegisterReq
	//	*FeMessage_SessionReq
	//	*FeMessage_SessionReply
	//	*FeMessage_LockdsReq
	//	*FeMessage_LockdsReply
	//	*FeMessage_SetcfgReq
	//	*FeMessage_SetcfgReply
	//	*FeMessage_CommcfgReq
	//	*FeMessage_CommcfgReply
	//	*FeMessage_GetReq
	//	*FeMessage_GetReply
	//	*FeMessage_NotifyDataReq
	//	*FeMessage_RegnotifyReq
	Message isFeMessage_Message `protobuf_oneof:"message"`
}

func (x *FeMessage) Reset() {
	*x = FeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeMessage) ProtoMessage() {}

func (x *FeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeMessage.ProtoReflect.Descriptor instead.
func (*FeMessage) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{28}
}

func (m *FeMessage) GetMessage() isFeMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *FeMessage) GetRegisterReq() *FeRegisterReq {
	if x, ok := x.GetMessage().(*FeMessage_RegisterReq); ok {
		return x.RegisterReq
	}
	return nil
}

func (x *FeMessage) GetSessionReq() *FeSessionReq {
	if x, ok := x.GetMessage().(*FeMessage_SessionReq); ok {
		return x.SessionReq
	}
	return nil
}

func (x *FeMessage) GetSessionReply() *FeSessionReply {
	if x, ok := x.GetMessage().(*FeMessage_SessionReply); ok {
		return x.SessionReply
	}
	return nil
}

func (x *FeMessage) GetLockdsReq() *FeLockDsReq {
	if x, ok := x.GetMessage().(*FeMessage_LockdsReq); ok {
		return x.LockdsReq
	}
	return nil
}

func (x *FeMessage) GetLockdsReply() *FeLockDsReply {
	if x, ok := x.GetMessage().(*FeMessage_LockdsReply); ok {
		return x.LockdsReply
	}
	return nil
}

func (x *FeMessage) GetSetcfgReq() *FeSetConfigReq {
	if x, ok := x.GetMessage().(*FeMessage_SetcfgReq); ok {
		return x.SetcfgReq
	}
	return nil
}

func (x *FeMessage) GetSetcfgReply() *FeSetConfigReply {
	if x, ok := x.GetMessage().(*FeMessage_SetcfgReply); ok {
		return x.SetcfgReply
	}
	return nil
}

func (x *FeMessage) GetCommcfgReq() *FeCommitConfigReq {
	if x, ok := x.GetMessage().(*FeMessage_CommcfgReq); ok {
		return x.CommcfgReq
	}
	return nil
}

func (x *FeMessage) GetCommcfgReply() *FeCommitConfigReply {
	if x, ok := x.GetMessage().(*FeMessage_CommcfgReply); ok {
		return x.CommcfgReply
	}
	return nil
}

func (x *FeMessage) GetGetReq() *FeGetReq {
	if x, ok := x.GetMessage().(*FeMessage_GetReq); ok {
		return x.GetReq
	}
	return nil
}

func (x *FeMessage) GetGetReply() *FeGetReply {
	if x, ok := x.GetMessage().(*FeMessage_GetReply); ok {
		return x.GetReply
	}
	return nil
}

func (x *FeMessage) GetNotifyDataReq() *FeNotifyDataReq {
	if x, ok := x.GetMessage().(*FeMessage_NotifyDataReq); ok {
		return x.NotifyDataReq
	}
	return nil
}

func (x *FeMessage) GetRegnotifyReq() *FeRegisterNotifyReq {
	if x, ok := x.GetMessage().(*FeMessage_RegnotifyReq); ok {
		return x.RegnotifyReq
	}
	return nil
}

type isFeMessage_Message interface {
	isFeMessage_Message()
}

type FeMessage_RegisterReq struct {
	RegisterReq *FeRegisterReq `protobuf:"bytes,2,opt,name=register_req,json=registerReq,oneof"`
}

type FeMessage_SessionReq struct {
	SessionReq *FeSessionReq `protobuf:"bytes,3,opt,name=session_req,json=sessionReq,oneof"`
}

type FeMessage_SessionReply struct {
	SessionReply *FeSessionReply `protobuf:"bytes,4,opt,name=session_reply,json=sessionReply,oneof"`
}

type FeMessage_LockdsReq struct {
	LockdsReq *FeLockDsReq `protobuf:"bytes,5,opt,name=lockds_req,json=lockdsReq,oneof"`
}

type FeMessage_LockdsReply struct {
	LockdsReply *FeLockDsReply `protobuf:"bytes,6,opt,name=lockds_reply,json=lockdsReply,oneof"`
}

type FeMessage_SetcfgReq struct {
	SetcfgReq *FeSetConfigReq `protobuf:"bytes,7,opt,name=setcfg_req,json=setcfgReq,oneof"`
}

type FeMessage_SetcfgReply struct {
	SetcfgReply *FeSetConfigReply `protobuf:"bytes,8,opt,name=setcfg_reply,json=setcfgReply,oneof"`
}

type FeMessage_CommcfgReq struct {
	CommcfgReq *FeCommitConfigReq `protobuf:"bytes,9,opt,name=commcfg_req,json=commcfgReq,oneof"`
}

type FeMessage_CommcfgReply struct {
	CommcfgReply *FeCommitConfigReply `protobuf:"bytes,10,opt,name=commcfg_reply,json=commcfgReply,oneof"`
}

type FeMessage_GetReq struct {
	GetReq *FeGetReq `protobuf:"bytes,11,opt,name=get_req,json=getReq,oneof"`
}

type FeMessage_GetReply struct {
	GetReply *FeGetReply `protobuf:"bytes,12,opt,name=get_reply,json=getReply,oneof"`
}

type FeMessage_NotifyDataReq struct {
	NotifyDataReq *FeNotifyDataReq `protobuf:"bytes,15,opt,name=notify_data_req,json=notifyDataReq,oneof"`
}

type FeMessage_RegnotifyReq struct {
	RegnotifyReq *FeRegisterNotifyReq `protobuf:"bytes,16,opt,name=regnotify_req,json=regnotifyReq,oneof"`
}

func (*FeMessage_RegisterReq) isFeMessage_Message() {}

func (*FeMessage_SessionReq) isFeMessage_Message() {}

func (*FeMessage_SessionReply) isFeMessage_Message() {}

func (*FeMessage_LockdsReq) isFeMessage_Message() {}

func (*FeMessage_LockdsReply) isFeMessage_Message() {}

func (*FeMessage_SetcfgReq) isFeMessage_Message() {}

func (*FeMessage_SetcfgReply) isFeMessage_Message() {}

func (*FeMessage_CommcfgReq) isFeMessage_Message() {}

func (*FeMessage_CommcfgReply) isFeMessage_Message() {}

func (*FeMessage_GetReq) isFeMessage_Message() {}

func (*FeMessage_GetReply) isFeMessage_Message() {}

func (*FeMessage_NotifyDataReq) isFeMessage_Message() {}

func (*FeMessage_RegnotifyReq) isFeMessage_Message() {}

var File_mgmt_proto protoreflect.FileDescriptor

var file_mgmt_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x67,
	0x6d, 0x74, 0x64, 0x22, 0x25, 0x0a, 0x0d, 0x59, 0x61, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x58,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68, 0x22, 0x42, 0x0a, 0x0d, 0x59, 0x61,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x56, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c,
	0x0a, 0x08, 0x59, 0x61, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x78, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x59, 0x61, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x0e,
	0x59, 0x61, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x64, 0x2e, 0x59, 0x61, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x43, 0x66,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x0e, 0x59, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x59, 0x61,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x78, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x42, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x78, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x58, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x78, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x58, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x5f, 0x78, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x58, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x42, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x08, 0x42, 0x65, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22,
	0x55, 0x0a, 0x0a, 0x42, 0x65, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x78, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x7d, 0x0a, 0x12, 0x42, 0x65, 0x43, 0x66, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78,
	0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x59, 0x61,
	0x6e, 0x67, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x14, 0x42, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x78, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x41, 0x6e, 0x79,
	0x22, 0x2a, 0x0a, 0x11, 0x42, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x13,
	0x42, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x66,
	0x5f, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x66, 0x41, 0x6e, 0x79, 0x22, 0x51, 0x0a, 0x0d, 0x59, 0x61, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x59, 0x61,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x78, 0x22, 0xf4, 0x03, 0x0a, 0x09, 0x42, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x64, 0x2e, 0x42, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x3c, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x42, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a,
	0x07, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x42, 0x65, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x78, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x64, 0x2e, 0x42, 0x65, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x78, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x66, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x42, 0x65, 0x43, 0x66, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x66,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x42, 0x65, 0x43, 0x66, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3e, 0x0a, 0x0d, 0x63, 0x66, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x42,
	0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x66, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x44, 0x0a, 0x0f, 0x63, 0x66, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64,
	0x2e, 0x42, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x66, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x30, 0x0a, 0x0d, 0x46, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x75, 0x0a, 0x0c, 0x46, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x46, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x04, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x05, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x52, 0x04, 0x64, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69,
	0x66, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x66, 0x41, 0x6e, 0x79, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x46, 0x65, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x04, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e,
	0x59, 0x61, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44,
	0x73, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x04, 0x64, 0x73, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x41, 0x6e, 0x79, 0x22, 0xe4, 0x01, 0x0a,
	0x11, 0x46, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x07, 0x73, 0x72, 0x63, 0x44, 0x73, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x07, 0x64, 0x73, 0x74, 0x44, 0x73, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x13, 0x46, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x72,
	0x63, 0x5f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x52, 0x07, 0x73, 0x72, 0x63, 0x44, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x64, 0x73,
	0x74, 0x5f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x52, 0x07, 0x64, 0x73, 0x74, 0x44, 0x73, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x69, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x66, 0x41, 0x6e, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x05,
	0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x52,
	0x04, 0x64, 0x73, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x64, 0x2e, 0x59, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe9, 0x01, 0x0a, 0x0a, 0x46, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a,
	0x05, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x52, 0x04, 0x64, 0x73, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x69, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x41, 0x6e, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e,
	0x59, 0x61, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x0f, 0x46, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x59, 0x61, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x01, 0x0a, 0x13,
	0x46, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x52, 0x04, 0x64, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x78, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x64, 0x2e, 0x59, 0x61, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x58, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x58, 0x70, 0x61, 0x74, 0x68, 0x22, 0x90, 0x06, 0x0a, 0x09, 0x46,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64,
	0x2e, 0x46, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x6b, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x39,
	0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f,
	0x63, 0x6b, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x65, 0x74,
	0x63, 0x66, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x63, 0x66, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x63, 0x66, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e,
	0x46, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x63, 0x66, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x63, 0x66, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x63, 0x66, 0x67, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x63, 0x66, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x63, 0x66, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x09, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a,
	0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x2e, 0x46,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x76, 0x0a,
	0x0e, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x05, 0x2a, 0x60, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x53, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x44, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x55, 0x50, 0x5f, 0x44, 0x53, 0x10, 0x04, 0x42, 0x0b, 0x5a, 0x09, 0x70, 0x6b, 0x67, 0x2f, 0x6d,
	0x67, 0x6d, 0x74, 0x64,
}

var (
	file_mgmt_proto_rawDescOnce sync.Once
	file_mgmt_proto_rawDescData = file_mgmt_proto_rawDesc
)

func file_mgmt_proto_rawDescGZIP() []byte {
	file_mgmt_proto_rawDescOnce.Do(func() {
		file_mgmt_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_proto_rawDescData)
	})
	return file_mgmt_proto_rawDescData
}

var file_mgmt_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mgmt_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_mgmt_proto_goTypes = []interface{}{
	(CfgDataReqType)(0),          // 0: mgmtd.CfgDataReqType
	(DatastoreId)(0),             // 1: mgmtd.DatastoreId
	(*YangDataXPath)(nil),        // 2: mgmtd.YangDataXPath
	(*YangDataValue)(nil),        // 3: mgmtd.YangDataValue
	(*YangData)(nil),             // 4: mgmtd.YangData
	(*YangCfgDataReq)(nil),       // 5: mgmtd.YangCfgDataReq
	(*YangGetDataReq)(nil),       // 6: mgmtd.YangGetDataReq
	(*BeSubscribeReq)(nil),       // 7: mgmtd.BeSubscribeReq
	(*BeSubscribeReply)(nil),     // 8: mgmtd.BeSubscribeReply
	(*BeTxnReq)(nil),             // 9: mgmtd.BeTxnReq
	(*BeTxnReply)(nil),           // 10: mgmtd.BeTxnReply
	(*BeCfgDataCreateReq)(nil),   // 11: mgmtd.BeCfgDataCreateReq
	(*BeCfgDataCreateReply)(nil), // 12: mgmtd.BeCfgDataCreateReply
	(*BeCfgDataApplyReq)(nil),    // 13: mgmtd.BeCfgDataApplyReq
	(*BeCfgDataApplyReply)(nil),  // 14: mgmtd.BeCfgDataApplyReply
	(*YangDataReply)(nil),        // 15: mgmtd.YangDataReply
	(*BeMessage)(nil),            // 16: mgmtd.BeMessage
	(*FeRegisterReq)(nil),        // 17: mgmtd.FeRegisterReq
	(*FeSessionReq)(nil),         // 18: mgmtd.FeSessionReq
	(*FeSessionReply)(nil),       // 19: mgmtd.FeSessionReply
	(*FeLockDsReq)(nil),          // 20: mgmtd.FeLockDsReq
	(*FeLockDsReply)(nil),        // 21: mgmtd.FeLockDsReply
	(*FeSetConfigReq)(nil),       // 22: mgmtd.FeSetConfigReq
	(*FeSetConfigReply)(nil),     // 23: mgmtd.FeSetConfigReply
	(*FeCommitConfigReq)(nil),    // 24: mgmtd.FeCommitConfigReq
	(*FeCommitConfigReply)(nil),  // 25: mgmtd.FeCommitConfigReply
	(*FeGetReq)(nil),             // 26: mgmtd.FeGetReq
	(*FeGetReply)(nil),           // 27: mgmtd.FeGetReply
	(*FeNotifyDataReq)(nil),      // 28: mgmtd.FeNotifyDataReq
	(*FeRegisterNotifyReq)(nil),  // 29: mgmtd.FeRegisterNotifyReq
	(*FeMessage)(nil),            // 30: mgmtd.FeMessage
}
var file_mgmt_proto_depIdxs = []int32{
	3,  // 0: mgmtd.YangData.value:type_name -> mgmtd.YangDataValue
	4,  // 1: mgmtd.YangCfgDataReq.data:type_name -> mgmtd.YangData
	0,  // 2: mgmtd.YangCfgDataReq.req_type:type_name -> mgmtd.CfgDataReqType
	4,  // 3: mgmtd.YangGetDataReq.data:type_name -> mgmtd.YangData
	5,  // 4: mgmtd.BeCfgDataCreateReq.data_req:type_name -> mgmtd.YangCfgDataReq
	4,  // 5: mgmtd.YangDataReply.data:type_name -> mgmtd.YangData
	7,  // 6: mgmtd.BeMessage.subscr_req:type_name -> mgmtd.BeSubscribeReq
	8,  // 7: mgmtd.BeMessage.subscr_reply:type_name -> mgmtd.BeSubscribeReply
	9,  // 8: mgmtd.BeMessage.txn_req:type_name -> mgmtd.BeTxnReq
	10, // 9: mgmtd.BeMessage.txn_reply:type_name -> mgmtd.BeTxnReply
	11, // 10: mgmtd.BeMessage.cfg_data_req:type_name -> mgmtd.BeCfgDataCreateReq
	12, // 11: mgmtd.BeMessage.cfg_data_reply:type_name -> mgmtd.BeCfgDataCreateReply
	13, // 12: mgmtd.BeMessage.cfg_apply_req:type_name -> mgmtd.BeCfgDataApplyReq
	14, // 13: mgmtd.BeMessage.cfg_apply_reply:type_name -> mgmtd.BeCfgDataApplyReply
	1,  // 14: mgmtd.FeLockDsReq.ds_id:type_name -> mgmtd.DatastoreId
	1,  // 15: mgmtd.FeLockDsReply.ds_id:type_name -> mgmtd.DatastoreId
	1,  // 16: mgmtd.FeSetConfigReq.ds_id:type_name -> mgmtd.DatastoreId
	5,  // 17: mgmtd.FeSetConfigReq.data:type_name -> mgmtd.YangCfgDataReq
	1,  // 18: mgmtd.FeSetConfigReq.commit_ds_id:type_name -> mgmtd.DatastoreId
	1,  // 19: mgmtd.FeSetConfigReply.ds_id:type_name -> mgmtd.DatastoreId
	1,  // 20: mgmtd.FeCommitConfigReq.src_ds_id:type_name -> mgmtd.DatastoreId
	1,  // 21: mgmtd.FeCommitConfigReq.dst_ds_id:type_name -> mgmtd.DatastoreId
	1,  // 22: mgmtd.FeCommitConfigReply.src_ds_id:type_name -> mgmtd.DatastoreId
	1,  // 23: mgmtd.FeCommitConfigReply.dst_ds_id:type_name -> mgmtd.DatastoreId
	1,  // 24: mgmtd.FeGetReq.ds_id:type_name -> mgmtd.DatastoreId
	6,  // 25: mgmtd.FeGetReq.data:type_name -> mgmtd.YangGetDataReq
	1,  // 26: mgmtd.FeGetReply.ds_id:type_name -> mgmtd.DatastoreId
	15, // 27: mgmtd.FeGetReply.data:type_name -> mgmtd.YangDataReply
	4,  // 28: mgmtd.FeNotifyDataReq.data:type_name -> mgmtd.YangData
	1,  // 29: mgmtd.FeRegisterNotifyReq.ds_id:type_name -> mgmtd.DatastoreId
	2,  // 30: mgmtd.FeRegisterNotifyReq.data_xpath:type_name -> mgmtd.YangDataXPath
	17, // 31: mgmtd.FeMessage.register_req:type_name -> mgmtd.FeRegisterReq
	18, // 32: mgmtd.FeMessage.session_req:type_name -> mgmtd.FeSessionReq
	19, // 33: mgmtd.FeMessage.session_reply:type_name -> mgmtd.FeSessionReply
	20, // 34: mgmtd.FeMessage.lockds_req:type_name -> mgmtd.FeLockDsReq
	21, // 35: mgmtd.FeMessage.lockds_reply:type_name -> mgmtd.FeLockDsReply
	22, // 36: mgmtd.FeMessage.setcfg_req:type_name -> mgmtd.FeSetConfigReq
	23, // 37: mgmtd.FeMessage.setcfg_reply:type_name -> mgmtd.FeSetConfigReply
	24, // 38: mgmtd.FeMessage.commcfg_req:type_name -> mgmtd.FeCommitConfigReq
	25, // 39: mgmtd.FeMessage.commcfg_reply:type_name -> mgmtd.FeCommitConfigReply
	26, // 40: mgmtd.FeMessage.get_req:type_name -> mgmtd.FeGetReq
	27, // 41: mgmtd.FeMessage.get_reply:type_name -> mgmtd.FeGetReply
	28, // 42: mgmtd.FeMessage.notify_data_req:type_name -> mgmtd.FeNotifyDataReq
	29, // 43: mgmtd.FeMessage.regnotify_req:type_name -> mgmtd.FeRegisterNotifyReq
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_mgmt_proto_init() }
func file_mgmt_proto_init() {
	if File_mgmt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mgmt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YangDataXPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YangDataValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YangData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YangCfgDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YangGetDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeSubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeSubscribeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeTxnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeTxnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeCfgDataCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeCfgDataCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeCfgDataApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeCfgDataApplyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YangDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeSessionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeLockDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeLockDsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeSetConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeSetConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeCommitConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeCommitConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeNotifyDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeRegisterNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mgmt_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*YangDataValue_EncodedStrVal)(nil),
	}
	file_mgmt_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*BeMessage_SubscrReq)(nil),
		(*BeMessage_SubscrReply)(nil),
		(*BeMessage_TxnReq)(nil),
		(*BeMessage_TxnReply)(nil),
		(*BeMessage_CfgDataReq)(nil),
		(*BeMessage_CfgDataReply)(nil),
		(*BeMessage_CfgApplyReq)(nil),
		(*BeMessage_CfgApplyReply)(nil),
	}
	file_mgmt_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*FeSessionReq_ClientConnId)(nil),
		(*FeSessionReq_SessionId)(nil),
	}
	file_mgmt_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*FeMessage_RegisterReq)(nil),
		(*FeMessage_SessionReq)(nil),
		(*FeMessage_SessionReply)(nil),
		(*FeMessage_LockdsReq)(nil),
		(*FeMessage_LockdsReply)(nil),
		(*FeMessage_SetcfgReq)(nil),
		(*FeMessage_SetcfgReply)(nil),
		(*FeMessage_CommcfgReq)(nil),
		(*FeMessage_CommcfgReply)(nil),
		(*FeMessage_GetReq)(nil),
		(*FeMessage_GetReply)(nil),
		(*FeMessage_NotifyDataReq)(nil),
		(*FeMessage_RegnotifyReq)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mgmt_proto_goTypes,
		DependencyIndexes: file_mgmt_proto_depIdxs,
		EnumInfos:         file_mgmt_proto_enumTypes,
		MessageInfos:      file_mgmt_proto_msgTypes,
	}.Build()
	File_mgmt_proto = out.File
	file_mgmt_proto_rawDesc = nil
	file_mgmt_proto_goTypes = nil
	file_mgmt_proto_depIdxs = nil
}
